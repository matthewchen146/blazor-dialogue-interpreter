@page "/"
@inject HttpClient Http
@inject IJSRuntime JS
@using Parser

<PageTitle>Dialogue Interpreter</PageTitle>

<main>
    <section class="editor">
        <section class="editor-column left">
            <div class="script-tools toolbar">
                <button @onclick="HandleDownloadClick">Download</button>
                <button @onclick="HandleImportClick">Import</button>
            </div>
            <div class="script-container">
                <textarea class="script" spellcheck="false"></textarea>
                <pre class="script-view" contenteditable="true"></pre>
            </div>
        </section>

        <section class="editor-column right">
            <div class="test">
                <div class="dialogue-container">
                    <div class="dialogue-header">
                        <div class="speaker-label">Speaker</div>
                    </div>
                    <div class="dialogue-box">dialogue box</div>
                    <div class="dialogue-footer">
                        <button class="next-button" @onclick="HandleNextClick">Next</button>
                    </div>
                </div>
                <div class="options-container">

                </div>
                <div class="test-tools toolbar">
                    <button @onclick="HandleRunClick">Run</button>
                    <select class="conversation-selector"></select>
                </div>
            </div>

            <div class="log-container">
                <pre class="log"></pre>
                <div class="log-tools toolbar">
                    <button class="log-clear" @onclick="HandleLogClearClick">Clear</button>
                </div>
            </div>
        </section>
    </section>
</main>

@code
{
    private DialogueInterpreter dialogueInterpreter = new();

    private string script = "";

    [JSInvokable]
    public async void Log(string? message, int level = 0)
    {
        if (message == null)
        {
            return;
        }
        string newLine = $"<span class='log-line level-{level}'>{message}</span>";
        await JS.InvokeVoidAsync("addLogInnerHTML", newLine);
    }

    public async void HandleLogClearClick()
    {
        await CallBySelector(".log", "element.innerHTML = ''");
    }

    private async void HandleImportClick()
    {
        await JS.InvokeVoidAsync("callFunction", @"
        const input = document.createElement('input');
        input.type = 'file';
        input.addEventListener('change', async () => {

            const files = Array.from(input.files);
            if (files.length > 0) {

                const text = await files[0].text();
                window.scriptTextArea.value = text;
                window.resizeView(false);
                window.updateScript();

            }

        });
        input.click();
        ");
    }

    private async void HandleDownloadClick()
    {
        // https://javascript.plainenglish.io/javascript-create-file-c36f8bccb3be
        await CallBySelector(".script", @"

        const text = element.value;
        const file = new File([text], 'dialogue.ds', {
            type: 'text/plain',
        });

        const link = document.createElement('a');
        const url = URL.createObjectURL(file);

        link.href = url;
        link.download = file.name;

        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        window.URL.revokeObjectURL(url);

        ");
    }

    [JSInvokable]
    public async ValueTask UpdateScript(string newScript)
    {
        script = newScript;

        int result = dialogueInterpreter.Load(script, out ErrorInfo? error, out DialogueInterpreter.DialogueData dialogueData);

        if (result == 0 && error != null)
        {
            Log($"Dialogue Error - {error}", 2);
        }

        @* return; *@

        string scriptViewText = "";

        int columnIndex = 0;

        Console.WriteLine("populating Fancy Script View");

        List<string> scriptLines = new() {""};

        for (int index = 0; index < dialogueData.tokens.Count; index++)
        {
            Token token = dialogueData.tokens[index];

            if (token.type == "newline")
            {
                scriptLines.Add("");
                continue;
            }

            // set up span
            List<string> classes = new() {token.type};

            string wrapper = "";
            if (token.type == "string")
            {
                wrapper = "\"\"";
            }

            if (index > 0 && dialogueData.tokens[index - 1].type == "command-prefix")
            {
                classes.Add("command");
            }

            string content = "";
            if (wrapper.Length > 0)
            {
                content = wrapper[0] + token.value + wrapper[1];
            }
            else
            {
                content = token.value;
            }

            scriptLines[token.position.lineIndex] += $"<span class='{string.Join(' ', classes)}'>{content}</span>";

        }

        int lastIndex = 0;
        if (dialogueData.tokens.Count > 0)
        {
            Token lastToken = dialogueData.tokens[^1];
            Console.WriteLine($"DIFFERENCE IN LENGTH: {lastToken.position.index + lastToken.value.Length}, {script.Length}");
        

            lastIndex = lastToken.position.index + lastToken.value.Length;
        }

        // fill remaining text
        while (lastIndex < script.Length)
        {
            if (script[lastIndex] == '\n')
            {
                scriptLines.Add("");
                lastIndex++;
                continue;
            }
            if (lastIndex == script.Length)
            {
                break;
            }

            scriptLines[scriptLines.Count - 1] += script[lastIndex];

            lastIndex++;
        }

        for (int index = 0; index < scriptLines.Count; index++)
        {
            string newline = index > 0 ? "\n" : "";
            string line = scriptLines[index];

            List<string> classes = new();

            if (result == 0 && error != null && error.position.lineIndex == index)
            {
                classes.Add("error");
            }

            scriptViewText += $"{newline}<span class='script-line {string.Join(' ', classes)}' data-line='{index + 1}'>{line}</span>";
        }

        


        string conversationSelectorInnerHTML = "";
        foreach (string conversationName in dialogueData.conversations.Keys)
        {
            conversationSelectorInnerHTML += $"<option value='{conversationName}'>{conversationName}</option>";
        }
        await CallBySelector(".conversation-selector", $"element.innerHTML = args[0]", conversationSelectorInnerHTML);

        await JS.InvokeVoidAsync("setScriptViewInnerHTML", scriptViewText);

    }

    [JSInvokable]
    public async ValueTask SetScript(string text)
    {
        script = text;

        // set textarea value
        await CallBySelector(".script", $"element.value = args[0]", script);

        // resize textarea
        await JS.InvokeVoidAsync("resizeView");

        await UpdateScript(script);
    }
    
    private async void HandleRunClick()
    {
        Log("Starting dialogue...");

        string? conversationName = await CallBySelector<string>(".conversation-selector", "return element.value");
        if (conversationName != null)
        {
            Log($"Starting conversation: {conversationName}");

            int result = dialogueInterpreter.StartConversation(conversationName, out string error);
            if (result == 0)
            {
                Log($"Failed to start conversation - {error}");
            }
        }
    }

    private void HandleNextClick()
    {
        int result = dialogueInterpreter.Next();
        Log($"next clicked! result: {result}");
    }

    [JSInvokable]
    public void HandleOptionClick(int index)
    {
        int result = dialogueInterpreter.ChooseOption(index, out string error);
        if (result == 0)
        {
            Log($"Option Click - {error}", 2);
        }
    }

    private async ValueTask<T> CallBySelector<T>(string selector, string callback, params object[] args)
    {
        return await JS.InvokeAsync<T>("callBySelector", selector, callback, args);
    }

    private async ValueTask CallBySelector(string selector, string callback, params object[] args)
    {
        await JS.InvokeVoidAsync("callBySelector", selector, callback, args);
    }

    protected override async Task OnInitializedAsync()
    {

        await JS.InvokeVoidAsync("setDotNetReference", "index", DotNetObjectReference.Create(this));

        string initJS = await Http.GetStringAsync("index.js");
        
        await JS.InvokeVoidAsync("callFunction", initJS);

        string text = await Http.GetStringAsync("examples/Test.txt");

        @* script = text; *@

        await SetScript(text);

        @* // set textarea value
        await CallBySelector(".script", $"element.value = `{script}`");

        // resize textarea
        await JS.InvokeVoidAsync("resizeView");

        await UpdateScript(script); *@

        // set up dialogue interpreter interaction
        dialogueInterpreter.Events.On("textChanged", async () => {
            string text = (string)dialogueInterpreter.Events.Args[0];
            Log("text changed " + text);
            await CallBySelector(".dialogue-box", "element.textContent = `" + text + "`;");
        });

        dialogueInterpreter.Events.On("speakerChanged", async () => {
            string speaker = (string)dialogueInterpreter.Events.Args[0];
            Log("speaker changed " + speaker);
            await CallBySelector(".speaker-label", "element.textContent = `" + speaker + "`;");
        });

        dialogueInterpreter.Events.On("optionAdded", async () => {
            int index = (int)dialogueInterpreter.Events.Args[0];
            string text = (string)dialogueInterpreter.Events.Args[1];
            string labelName = (string)dialogueInterpreter.Events.Args[2];
            await CallBySelector(".options-container", $@"
            const button = document.createElement('button'); 
            button.textContent = `{text}`;
            button.classList.toggle('option-button', true);
            button.addEventListener('click', () => {{
                window.callDotNetReferenceMethod('index', 'HandleOptionClick', {index});
            }})
            element.appendChild(button);"
            );
        });

        dialogueInterpreter.Events.On("optionsCleared", async () => {
            await CallBySelector(".options-container", "while (element.firstChild) {element.removeChild(element.lastChild);}");
        });

        dialogueInterpreter.Events.On("error", async () => {
            Log("Dialogue Error - " + (string)dialogueInterpreter.Events.Args[0], (int)dialogueInterpreter.Events.Args[1]);
        });
    }

}